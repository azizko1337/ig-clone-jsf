package com.jsf.controllers;

import com.jsf.dao.PostDAO;
import com.jsf.entities.Post;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.view.ViewScoped;

import jakarta.inject.Named;
import jakarta.servlet.http.Part;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

@Named
@ViewScoped
public class PostController implements Serializable {

    @EJB
    private PostDAO postDAO;
    
    private Post post; // Aktualnie edytowany post
    private Part uploadedFile; // Przesłany plik
    
 // Metoda do tworzenia i edytowania posta
    public void savePost() {
        try {
            // Jeśli post jest nowy (ID = 0), najpierw zapisujemy go w bazie, aby uzyskać ID
            if (post.getId() == 0) {
                postDAO.create(post); // Tworzymy nowy post
            }

            // Obsługa przesyłanego pliku
            if (uploadedFile != null) {
                String fileName = uploadedFile.getSubmittedFileName();
                
                // Ścieżka do głównego folderu na pliki
                String baseUploadPath = String baseUploadPath = servletContext.getRealPath("/uploads");
                
                // Ścieżka do folderu z ID posta
                String postFolder = baseUploadPath + File.separator + post.getId();
                Path postFolderPath = Paths.get(postFolder);

                // Tworzenie folderu, jeśli nie istnieje
                if (!Files.exists(postFolderPath)) {
                    Files.createDirectories(postFolderPath);
                }

                // Pełna ścieżka do pliku
                Path filePath = postFolderPath.resolve(fileName);

                // Zapis pliku
                Files.copy(uploadedFile.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
            }

            // Aktualizacja posta w bazie danych
            postDAO.merge(post);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public List<Post> getAllPosts() {
    	List<Post> posts = postDAO.getFullList();
        return posts;
    }
    
    public Post getPost() {
        if (post == null) {
            post = new Post();  // Tworzymy nowy post, jeśli nie istnieje
        }
        return post;
    }
    public void setPost(Post post) {
        this.post = post;
    }
    
    public Part getUploadedFile() {
        return uploadedFile;
    }
    public void setUploadedFile(Part uploadedFile) {
        this.uploadedFile = uploadedFile;
    }
}
