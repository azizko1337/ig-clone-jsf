package com.jsf.authbeans;

import java.io.Serializable;
import java.util.List;

import com.jsf.dao.UserDAO;
import com.jsf.dao.UserRoleDAO;
import com.jsf.entities.User;

import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.simplesecurity.Password;
import jakarta.faces.simplesecurity.RemoteClient;
import jakarta.faces.simplesecurity.ServerClient;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Named
@ViewScoped
public class Profile implements Serializable{
	private static final String PAGE_INDEX = "/pages/index?faces-redirect=true";
	private static final String PAGE_REGISTER = "/pages/auth/register?faces-redirect=true";
	private static final String PAGE_STAY_AT_THE_SAME = null;
	private static final String PAGE_LOGIN = "/pages/auth/login?faces-redirect=true";
	
	private User user;
	private String newPassword;
	private String repeatedNewPassword;
	private String currentPasswordEdit;
	private String currentPasswordDelete;
	
	
	@Inject
	UserDAO userDAO;
	
	@Inject
	UserRoleDAO userRoleDAO;
	
	public void onLoad() {
		User loggedUser = ServerClient.getLoggedUser();
		
		User user = new User();
		user.setId(loggedUser.getId());
		user.setNickname(loggedUser.getNickname());
		user.setFirstName(loggedUser.getFirstName());
		user.setLastName(loggedUser.getLastName());
		user.setEmail(loggedUser.getEmail());
		user.setPassword(loggedUser.getPassword());
		
		setUser(user);
	}
	
	
	public String logout(){
		HttpSession session = (HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(true);
		session.invalidate();
		return PAGE_LOGIN;
	}
	
	public void save() {
		User loggedUser = ServerClient.getLoggedUser();
		
		FacesContext ctx = FacesContext.getCurrentInstance();
		if(loggedUser.getPassword().equals(Password.hash(getCurrentPasswordEdit()))) {
			if(getNewPassword().length()>0) {
				if(getNewPassword().equals(getRepeatedNewPassword())) {
					getUser().setPassword(Password.hash(getNewPassword()));
				}else {
					ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Nowe hasła nie są takie same.", null));
					return;
				}
			}
				
//			check if nickname has been changed, if yes check unique
			if(!loggedUser.getNickname().equals(getUser().getNickname())) {
				if(!userDAO.checkUniqueNickname(getUser().getNickname())){
					ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Nazwa jest juz zajeta.", null));
					return;
				}
			}
//			check if 
			if(!loggedUser.getEmail().equals(getUser().getEmail())) {
				if(!userDAO.checkUniqueEmail(getUser().getEmail())){
					ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Email jest juz zajety.", null));
					return;
				}
			}
			
			userDAO.merge(getUser());
			
			ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Zapisano zmiany.", null));
				
			
		}else {
			ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Nie mozna edytowac danych, niepoprawne obecne haslo", null));
		}
	}
	
	public String delete() {
		if(user.getPassword().equals(Password.hash(getCurrentPasswordDelete()))) {
			userDAO.remove(user);
			return logout();
		}else {
			FacesContext ctx = FacesContext.getCurrentInstance();
			ctx.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					"Nie mozna usunac konta, niepoprawne stare haslo", null));
			return null;
		}
	}


	public User getUser() {
		return user;
	}
	public void setUser(User user) {
		this.user = user;
	}
	public String getNewPassword() {
		return newPassword;
	}
	public void setNewPassword(String newPassword) {
		this.newPassword = newPassword;
	}
	public String getRepeatedNewPassword() {
		return repeatedNewPassword;
	}
	public void setRepeatedNewPassword(String repeatedNewPassword) {
		this.repeatedNewPassword = repeatedNewPassword;
	}
	public String getCurrentPasswordEdit() {
		return currentPasswordEdit;
	}
	public void setCurrentPasswordEdit(String currentPasswordEdit) {
		this.currentPasswordEdit = currentPasswordEdit;
	}
	public String getCurrentPasswordDelete() {
		return currentPasswordDelete;
	}
	public void setCurrentPasswordDelete(String currentPasswordDelete) {
		this.currentPasswordDelete = currentPasswordDelete;
	}
}
